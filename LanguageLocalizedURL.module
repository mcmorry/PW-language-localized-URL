<?php
/**
* Localized URL generator and parser
* 
* Author: Maurizio Margiotta
* http://processwire.com/talk/user/117-mcmorry/
*
* source: https://github.com/mcmorry/PW-language-localized-URL
*
* Many thanks to diogo for starting concept and support
* http://processwire.com/talk/user/88-diogo/)
*
*/
class LanguageLocalizedURL extends WireData implements Module, ConfigurableModule {

	protected static $defaults = array(
		'defaultLang' => 'en',
		'includePageId' => 0,
		'includeParentId' => 0,
		'publishedPageField' => 'language_published'
	);

	protected function getDefaultLanguage() {
		if (!$this->defaultLang) return LanguageLocalizedURL::$defaults['defaultLang'];
		return $this->defaultLang;
	}

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Generate and parse localized URL',
			'version' => 002,
			'summary' => "This module is useful to generate localized url. See documentation: https://github.com/mcmorry/PW-language-localized-URL",
			'href' => '',
			'singular' => true,
			'autoload' => true
		);
	}


	protected function getConfig($key) {
		if (!$this->$key) return LanguageLocalizedURL::$defaults[$key];
		return $this->$key;
	}

	static public function getModuleConfigInputfields(array $data) {

		$data = array_merge(self::$defaults, $data);

		$fields = new InputfieldWrapper();
		$modules = wire("modules");

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'defaultLang');
		$field->attr('size', 10);
		$field->attr('value', $data['defaultLang']);
		$field->label = "Default language";
		$field->description = "What is the url code you want to use for your defaul language?";
		$field->notes = "Example: en, it, fr, ...";
		$fields->append($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->attr('name', 'includePageId');
		$field->attr('checked', empty($data['includePageId']) ? '' : 'checked');
		$field->attr('value', 1);
		$field->label = "Page ID prefix";
		$field->description = "Include page ID as prefix (id_slug)";
		$fields->append($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->attr('name', 'includeParentId');
		$field->attr('checked', empty($data['includeParentId']) ? '' : 'checked');
		$field->attr('value', 1);
		$field->label = "Parent ID prefix";
		$field->description = "Include parent ID as prefix (id_slug)";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'publishedPageField');
		$field->attr('value', $data['publishedPageField']);
		$field->label = "Page field for published languages";
		$field->description = "Page field name for defining the languages that are published."
			." Create a page field i.e. language_published. Set the template to the one you use for the proxy pages."
			." Set inputfield type to checkboxes. You also want to include a check in you selectors for navigation or lists"
			." to determine if a page in the current language is really published.";
		$field->notes = "Example: language_published (name of the field as string)";
		$fields->append($field);

		return $fields;
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
		$this->addHookAfter('Page::path', $this, 'mlUrl');
		$this->addHookProperty('Page::mlUrlSegments', $this, 'mlUrlSegments');
	}

	/**
	* This method builds a localized url with this format: [language code]/[localized parent title]/[localized page title]
	* It accepts two parameters, both optional:
	* 1: bool If true the url will contain the id of the loaded page: [language code]/[localized parent title]/[page id]_[localized page title]
	* 2: bool If true the url will contain the id of the parents: [language code]/[parent id]_[localized parent title]/[localized page title]
	*/
	public function mlUrl(HookEvent $event) {
		$page = $event->object;
		
		// exclude from admin
		if($page->template == 'admin') return;

		// add the language code at the beginning of the url
		$lang = $this->user->language->name;
		if (!$lang || $lang=='default') $lang = $this->getDefaultLanguage();

		// if on homepage return current language root
		if($page->id === 1) return $event->return = "/$lang/";
		
		// generate the url using titles and, eventually id
		$path = '';
		$parents = $page->parents();
		foreach($parents as $parent) {
			if($parent->id > 1) {       
				$path .= "/".($this->getConfig("includeParentId")?$parent->id.'_':'').$this->toSlug($parent->title);
			}
		}
		$url = $path . '/'.($this->getConfig("includePageId")?$page->id.'_':'').$this->toSlug($page->title) . '/'; 
		$event->return = '/'.$lang.$url;
	}

	private function toSlug($str) {
		$str = mb_strtolower($str);
		$str = $this->sanitizer->pageName($str, Sanitizer::translate);
		return $str;
	}

	/**
	* Parse the localized URL to load the correct page
	*/
	public function parseUrl() {
		$page		= $this->page;
		$user		= $this->user;
		$languages	= $this->languages;
		$input		= $this->input;
		$pages		= $this->pages;

		// Set the current language based on the name of the proxy page
		$lang = $page->name;
		if ($lang == $this->getDefaultLanguage()) $lang = 'default';
		$user->language = $languages->get($lang);

		// search the page to open
		$basePage = $pages->get("/");
		$segments = $input->urlSegments;

		if($segments){
			$page = $basePage;
			foreach($segments as $segment){
				// save instance for testing pagenum / urlsegments
				$parent = $page;
				$page = $this->getPage($page, $segment);

				if($page === null) {

					// pagenums enabled on template?
					if($parent->template->allowPageNum) {
						$page = $parent;

					// urlsegments enabled on template?
					} else if($parent->template->urlSegments) {
						// return past found page
						$page = $parent;
						// url segments to remap? don't think this is a good idea
						// should be done on template

						// this requires to add a function to unset urlSegments array in WireInput class

						// if(count($segments) < count($page->parents)) continue;
						// $segmentsCount = count($segments) - count($parent->parents);
						// foreach($segments as $key => $segment){
						//     if($segmentsCount < $key) {
						//         $input->unsetUrlSegment($key);
						//         $input->setUrlSegment($key - $segmentsCount,$segment);
						//     }
						//     else $input->unsetUrlSegment($key);
						// }
					} else {
						throw new Wire404Exception();
					}
				}

				// real language url segment name
				$langname = $lang == 'default' ? $this->getDefaultLanguage() : $lang;

				// if the language is not published throw 404
				// this requires a page field "language_published" with template set the same 
				// as for the language proxy pages /en/, /de/,...
				$pub_field = $this->getConfig("publishedPageField");
				if($page->get($pub_field)){
					if(!$page->get($pub_field)->has($pages->get("/$langname/")))
						throw new Wire404Exception();
				}
			}
		} else {
			$page = $basePage;
		}
		$this->fuel->set('page', $page);
		return $page;
	}
	
	public function mlUrlSegments(HookEvent $event) {
		$page = $event->object;
		$input = $this->input;
		
		$urlSegments = null;
		if($page->template->urlSegments) {
			$urlSegments = array_slice($input->urlSegments,count($page->parents));
			return $event->return = $urlSegments;
		}
		return $event->return = array();
	}

	private function getPage($basePage, $segment) {
		$pages	= $this->pages;

		$parts  = explode('_', $segment);
		$pageid = null;
		$page   = null;
		if (count($parts) > 1 && is_numeric($parts[0])) {
			$pageid = $parts[0];
			$page = $pages->get($pageid);
			if ($page instanceof NullPage) $page = null;
		} else {
			// include hidden pages to be found
			$children = $basePage->children('include=hidden');
			foreach ($children as $child){
				if($segment == $this->toSlug($child->title)){
					$page = $child;
					break;
				}
			}
		}
		return $page;
	}
}
