<?php
/**
* Localized URL generator and parser
* 
* Author: Maurizio Margiotta
* http://processwire.com/talk/user/117-mcmorry/
*
* Source: https://github.com/mcmorry/PW-language-localized-URL
*
* Many thanks to Diogo for starting concept and support
* http://processwire.com/talk/user/88-diogo/
*
* Many thanks to Soma for many improvements
* http://processwire.com/talk/user/100-soma/
*
*/
class LanguageLocalizedURL extends WireData implements Module, ConfigurableModule {

	protected static $defaults = array(
		'defaultLang' => 'en',
		'includePageId' => 0,
		'includeParentId' => 0,
		'publishedPageField' => 'language_published',
		'noFolderForDefaultLanguage' => 0
	);

	protected function getDefaultLanguage() {
		if (!$this->defaultLang) return LanguageLocalizedURL::$defaults['defaultLang'];
		return $this->defaultLang;
	}

	protected function getConfig($key) {
		if (!$this->$key) return LanguageLocalizedURL::$defaults[$key];
		return $this->$key;
	}

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(
			'title' => 'Generate and parse localized URL',
			'version' => 007,
			'summary' => "This module is useful to generate localized url. See documentation: https://github.com/mcmorry/PW-language-localized-URL",
			'href' => '',
			'singular' => true,
			'autoload' => true
		);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
		// replace real urls with language localized urls on textarea language fields
		$this->addHookBefore('FieldtypeTextareaLanguage::wakeupValue', $this, 'replaceURL');
		$this->addHookBefore('FieldtypeTextareaLanguage::sleepValue', $this, 'replaceURL');

		// replace PW's url method
		$this->addHookAfter('Page::path', $this, 'mlUrl');
	}

	/**
	* This method builds a localized url with this format: [language code]/[localized parent title]/[localized page title]
	* It accepts two parameters, both optional:
	* 1: bool If true the url will contain the id of the loaded page: [language code]/[localized parent title]/[page id]_[localized page title]
	* 2: bool If true the url will contain the id of the parents: [language code]/[parent id]_[localized parent title]/[localized page title]
	*/
	public function mlUrl(HookEvent $event) {
		
		// prevent tinymce edit links modal from using language url for page list select
		if(isset($_SERVER['HTTP_REFERER'])) {
			if( strpos( $_SERVER['HTTP_REFERER'], "page/link/?id" ) !== false ) return;
		}

		$page = $event->object;
		
		// exclude from admin
		if($page->template == 'admin') return;

		// add the language code at the beginning of the url
		$lang = $this->user->language->name;
		$defaultLang = $this->getDefaultLanguage();
		if (!$lang || $lang=='default') $lang = $defaultLang;

		// if on homepage return current language root
		if($page->id === 1) {
			if ($lang === $defaultLang && $this->getConfig("noFolderForDefaultLanguage")) return $event->return = '/';
			else return $event->return = "/$lang/";
		}
		
		// generate the url using titles and, eventually id
		$path = '';
		$parents = $page->parents();
		foreach($parents as $parent) {
			if($parent->id > 1) {       
				$path .= "/".($this->getConfig("includeParentId")?$parent->id.'_':'').$this->toSlug($parent->title);
			}
		}
		$url = $path . '/'.($this->getConfig("includePageId")?$page->id.'_':'').$this->toSlug($page->title) . '/'; 
		
		if ($lang === $defaultLang && $this->getConfig("noFolderForDefaultLanguage")) $event->return = $url;
		else $event->return = '/'.$lang.$url;
	}

	private function toSlug($str) {
		$str = mb_strtolower($str);
		$str = $this->sanitizer->pageName($str, Sanitizer::translate);
		return $str;
	}

	/**
	* Parse the localized URL to load the correct page
	*/
	public function parseUrl() {
		$page       = $this->page;
		$user       = $this->user;
		$languages  = $this->languages;
		$input      = $this->input;
		$pages      = $this->pages;

		// Set the current language based on the name of the proxy page
		$lang = $page->name;
		if ($lang == $this->getDefaultLanguage()) $lang = 'default';
		$user->language = $languages->get($lang);

		// search the page to open
		$basePage = $pages->get("/");
		$segments = $input->urlSegments;
		$realSegmentsFound = false;

		if($segments){
			$page = $basePage;
			foreach($segments as $segment){
				// save instance for testing pagenum / urlsegments
				$parent = $page;
				$page = $this->getPage($page, $segment);

				if($page === null) {

					// pagenums enabled on template?
					if($parent->template->allowPageNum) {
						$page = $parent;

					// urlsegments enabled on template?
					} else if($parent->template->urlSegments) {
						// return past found page
						$page = $parent;
						
						$realSegmentsFound = true;
						
						break;
					} else {
						throw new Wire404Exception();
					}
				}

				// real language url segment name
				$langname = $lang == 'default' ? $this->getDefaultLanguage() : $lang;

				// if the language is not published throw 404
				// this requires a page field "language_published" with template set the same 
				// as for the language proxy pages /en/, /de/,...
				$pub_field = $this->getConfig("publishedPageField");
				if($page->get($pub_field)){
					if(!$page->get($pub_field)->has($pages->get("/$langname/")))
						throw new Wire404Exception();
				}
			}
		} else {
			$page = $basePage;
		}
		
		// Reindex urlSegments
		$pagesCount = count($page->parents);
		if (!$realSegmentsFound || count($segments) > $pagesCount) {
			for ($i=0; $i<$pagesCount; $i++) {
				$input->setUrlSegment(1, null);
			}
		}
		
		$this->fuel->set('page', $page);
		return $page;
	}
	
	private function getPage($basePage, $segment) {
		$pages  = $this->pages;

		$parts  = explode('_', $segment);
		$pageid = null;
		$page   = null;
		if (count($parts) > 1 && is_numeric($parts[0])) {
			$pageid = $parts[0];
			$page = $pages->get($pageid);
			if ($page instanceof NullPage) $page = null;
		} else {
			// include hidden pages to be found
			$children = $basePage->children('include=hidden');
			foreach ($children as $child){
				if($segment == $this->toSlug($child->title)){
					$page = $child;
					break;
				}
			}
		}
		return $page;
	}

	/**
	 * This method parses for real page urls in language textareas and 
	 * replaces them with the localized language url
	 *
	 * Modified urls will get saved on first save as we also use this method on sleepValue method
	 */
	public function replaceURL(HookEvent $event) {

		// prevent execution (some conflicts) on field edit for tinymce textarea language fields
		if(wire("process") == "ProcessField") return;

		$page = $event->arguments[0]; // not using, but here if you need it
		$field = $event->arguments[1]; // not using, but here if you need it
		$value = $event->arguments[2];

		if(empty($value)) return;

		// if in admin, create array for each language to replace urls for each language value
		$languages = array();
		if( strpos($_SERVER['REQUEST_URI'], $this->config->urls->admin) !== false) {
			foreach(wire('languages') as $key => $lang) $languages[] = $lang->id;
		} else {
			// if on frontend only use current user language
			$languages[] = wire('user')->language->id;
		}

		if(!is_object($value)) return;

		if($value instanceof LanguagesPageFieldValue) {

			// store user lang
			$user_lang = wire('user')->language;

			$rootUrl = rtrim(wire('config')->urls->root, '/');

			foreach($languages as $lang) {

				$replaced_value = '';

				if($value == NULL) continue;

				// get the language value for parsing for page urls
				$replaced_value = $value->getLanguageValue($lang);

				// find all links
				if(!preg_match_all('{href=[\'"]([-_./a-z0-9]+)[\'"]}', $replaced_value, $matches)) return;

				foreach($matches[1] as $key => $url) {

					// slice off subdirectory if site is running from one, so we have a clean URL from PW-install root
					if($rootUrl && strpos($url, $rootUrl) === 0) $url = substr($url, strlen($rootUrl));

					// see if this is a link to a PW-managed page in the site
					$linkPage = wire('pages')->get($url);

					// if not a real PW url go on to the next
					if(!$linkPage->id) continue;

					// set user lang to current cycled language to be able to simply use $page->url
					wire('user')->language = wire("languages")->get($lang);

					// get language url (will return language url)
					$langUrl = $linkPage->url;

					// restore user lang
					wire('user')->language = $user_lang;

					// replace the default language URL with the language URL
					$replaced_value = str_replace($matches[0][$key], "href='$langUrl'", $replaced_value);

				}

				// set the modified language value
				$value->setLanguageValue($lang,$replaced_value);
			}
		}
		$event->return = $value;
	}

	/**
	 * commented out for later
	 */
	/*
	public function install() {

		// create language proxy template
		$tname = 'language_url_proxy';
		if (!$fieldgroup = $this->fieldgroups->get($tname)) {
			$fieldgroup = new Fieldgroup();
			$fieldgroup->name = $tname;
			$fieldgroup->add($this->fields->get('title'));
			$fieldgroup->save();
		}
		if (!$this->templates->get($tname)) {
			$tmpl = new Template();
			$tmpl->name = $tname;
			$tmpl->fieldgroup = $fieldgroup;
			$tmpl->urlSegments = 1;
			$tmpl->flags = Template::flagSystem;
			$tmpl->save();
		}

	}

	public function uninstall() {

		// delete language proxy template
		$tname = 'language_url_proxy';
		$tmpl = $this->templates->get($tname);
		if ($tmpl) {
			// remove any page using this template
			$pages = $this->pages->find("template=$tname,include=all");
			if ($pages) {
				foreach ($pages as $p) {
					$path = $p->path;
					if ($this->pages->delete($p)) {
						$this->message($this->_("Deleted language proxy page: $path"));
					}
				}
			}
			// remove template
			$tmpl->flags = Template::flagSystemOverride;
			$tmpl->flags = 0;
			$this->templates->delete($tmpl);
			// remove fieldgroup
			$fieldgroup = $this->fieldgroups->get($tname);
			if ($fieldgroup) 
				$this->fieldgroups->delete($fieldgroup);
		}

	}
	*/



	static public function getModuleConfigInputfields(array $data) {

		$data = array_merge(self::$defaults, $data);

		$fields = new InputfieldWrapper();
		$modules = wire("modules");

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'defaultLang');
		$field->attr('size', 10);
		$field->attr('value', $data['defaultLang']);
		$field->label = "Default language";
		$field->description = "What is the url code you want to use for your defaul language?";
		$field->notes = "Example: en, it, fr, ...";
		$fields->append($field);
		
		$field = $modules->get("InputfieldCheckbox");
		$field->attr('name', 'noFolderForDefaultLanguage');
		$field->attr('checked', empty($data['noFolderForDefaultLanguage']) ? '' : 'checked');
		$field->attr('value', 1);
		$field->label = "Disable sub-folder for default language";
		$field->description = "If selected the pages in default language will NOT have a sub-folder for the language (eg. /en/)";
		$fields->append($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->attr('name', 'includePageId');
		$field->attr('checked', empty($data['includePageId']) ? '' : 'checked');
		$field->attr('value', 1);
		$field->label = "Page ID prefix";
		$field->description = "Include page ID as prefix (id_slug)";
		$fields->append($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->attr('name', 'includeParentId');
		$field->attr('checked', empty($data['includeParentId']) ? '' : 'checked');
		$field->attr('value', 1);
		$field->label = "Parent ID prefix";
		$field->description = "Include parent ID as prefix (id_slug)";
		$fields->append($field);

		$field = $modules->get("InputfieldText");
		$field->attr('name', 'publishedPageField');
		$field->attr('value', $data['publishedPageField']);
		$field->label = "Page field for published languages";
		$field->description = "Page field name for defining the languages that are published."
			." Create a page field i.e. language_published. Set the template to the one you use for the proxy pages."
			." Set inputfield type to checkboxes. You also want to include a check in you selectors for navigation or lists"
			." to determine if a page in the current language is really published.";
		$field->notes = "Example: language_published (name of the field as string)";
		$fields->append($field);

		return $fields;
	}
}